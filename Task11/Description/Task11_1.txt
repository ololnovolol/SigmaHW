Я вважаю, що продукти потрiбно реалiзуваты згiдно за паттерном <<Фабричний метод>>
— це породжувальний патерн проектування, який визначає загальний інтерфейс для створення об’єктів у суперкласі, 
дозволяючи підкласам змінювати тип створюваних об’єктів.

Тобто буде класс AbstractDeveloper за допомогою якого будуть створюватись новi види продукту на основi спiльного iнтрефейсу
IProduct, а його вже будуть реалiзувати необхiднi нам продукти:

- класи продуктiв будуть лише Data классами вони будуь зберiгати стан когжного окремого продукту 

також треба зауважити, що для створення кожного новогу продукту потрiбен клас який буде наслiдуватись вiд AbstractDeveloper
та буде створювати потрiбнi нам класи продуктiв. Таким чином за допомогою данного паттерну могжна буде реалiзовувати довiльну
кiлькiсть унiкальних продуктiв в одному мiсцi..

Тим самим клас Storage буде також зберiгати всi продукти за допомогою iнтерфейсу IProduct.
Все, що потрiбно мати це те щоб бути обгорткою над IList<IProduct>
(додавати, видаляти, отримувати, тощо необхiднi продукти)

Також нам буде потрiбен клас ProductService
 - який буде корегувати цiну для всiх продуктiв
 - окремих продуктiв
 - збiльшувати/зменшувати кiлькiсть продуктiв на складi

на мою думку така структура проекту буде:
 - оптимальною для росширення бази продуктiв
 - зможе покрити безлiч нових утворенних продуктiв
 - Позбавляє клас від прив’язки до конкретних класів продуктів.
 - спростить підтримку коду.
 - Реалізує принцип відкритості/закритості.
