
 Я вважаю доречно використовувати паттерни саме для програмування бiзнесу 
бо для бiзнесу вважлива в першу чергу саме швидкiсть створення программ.
Всi iншi аспекти це бiль саме програмiстiв яку необхiно в любому випадку знати,
тому що "друзiв потрiбно трибати близько, а ворогiв ще блище".
Паттерни можуть бути як твоiм другом так i ворогом.

				1) вигiдно тому, що:

- паттерни були придуманi достатнто давно и i досi не потребують якихось кординальних змiн.

- паттерн це перш за все шаблон, який розвв'язює типовi проблеми 
(тому необхiдно використовувати при точних спiввiдношеннях проблеми до паттерну), щоб 
розкрити силу шаблону.

- паттерни ,що використовуються у e-comers пришвидшують створення коду(не приходится
декiлька днiв придумавати алгоритм розв'язку типових проблем), а також бiльш 
пришвидшують його загальне сприйняття iншими розробниками.

- також в бiльшостi випадках паттерни допомагають вирiшувати проблеми не знехтуючи
принципами SOLID (iнкапсулюють реалiзацii, дозволяють розширювати код не змiнюючи...),
додають рiвнi абстакцiй, зменшують взаємозв'язок об'єктiв...

- дозволяють вирiшуквати проблеми природними шляхами, так як паттерни взятi з життя i
використовуються не лише у програмуваннi, а й на виробництвах та iнших галузях.

- здатнiсть пов'зуваннь з iншими паттернамию

- є певна можливicь видозмiн пiд певнi проблеми (так як не являються жорстоким рецептом, 
в деяких випадках можно видозмiнити не основополягаючi елементи).

- 



				2) не вигiдно тому, що:

- паттерни можуть порушувати принципи SOLID.
Тому в тих патернах де цi пункти нехтуються - можуть бути недоречними.

- дуже часто код роздувається в виглядi створення великих паралельних ієрархій класів

- не завжди досягається висока оптимiацiя програми

- можуть утворювати божественнi класи

- ускладюють код

- вимагають, щоб iншi розробники знали паттерни, та притримувались додаткових тонкощiв

- зменшують створюванню новiтнiх пiдходiв до розробки

- є певна можливicь видозмiн пiд певнi проблеми (так як не являються жорстоким рецептом, 
в деяких випадках можно видозмiнити не основополягаючi елементи). Тому всi хто включенi в процесс
повиннi знати такi ньюанси.

- зламують сприйняття проблем, тому взачасту можуть викорустовуватися недоречно маючи при цьому 
дуже схожi на певний погляд проблематики.

- недосвiченнiсть може призвести до порушшення основи принципа KISS (Keep It Simple, Stupid).